{"name":"Ningzeta-sample-querydsl","tagline":"Usage of querydsl with spring JPA","body":"# NingZeta-Sample-Querydsl\r\n\r\nGeneral usage example of querydsl with Spring JPA.\r\n\r\nMeta-model are generated using maven plugin [maven-apt-plugin](https://github.com/querydsl/apt-maven-plugin).\r\n\r\n#### Description:\r\n**Entity**\r\n* _Customer:_ Information for customer.\r\n* _Country:_ Name and ISO [3166-1-alpha-2 code](http://www.iso.org/iso/country_names_and_code_elements)\r\n\r\n**Data File**\r\n* Located at : `src\\main\\resources\\data.sql`. It will be automatically loaded into the _embedded H2 DB_ at spring-boot start up.\r\n\r\n**Use-Case**\r\n* Display all the customers sorted.\r\n* Display list of customer from a certain country.\r\n* Display a customer information and which country belongs to with the country flag.\r\n* Display all customer within an age-range.\r\n\r\n## Technology use\r\n* Spring-Boot\r\n* Spring Data JPA\r\n* Querydsl\r\n* Embedded H2 database\r\n* Thymleaf (Templating)\r\n* Bootstrap (Easy UI)\r\n* Flag-icon-css (flag svg)\r\n\r\nRefer to `pom.xml` for details.\r\n\r\n## Requirement\r\n\r\n* Maven 3.x\r\n* Java 1.7+\r\n\r\n## How to ?\r\n1) Describe the Entiy and **Annotate** with @Entity.\r\n```java\r\n@Entity\r\nclass Country {\r\n   ...\r\n}\r\n````\r\n2) Add the maven dependency.\r\n```xml\r\n<!-- Querydsl dependencies -->\r\n <dependency>\r\n\t<groupId>com.mysema.querydsl</groupId>\r\n\t<artifactId>querydsl-apt</artifactId>\r\n\t<version>${querydsl.version}</version>\r\n</dependency>\r\n<dependency>\r\n\t<groupId>com.mysema.querydsl</groupId>\r\n\t<artifactId>querydsl-jpa</artifactId>\r\n\t<version>${querydsl.version}</version>\r\n</dependency>\r\n````\r\n3) Generate the meta-model using maven plugin.\r\n````xml\r\n<!-- Generate meta-model classes -->\r\n<plugin>\r\n  <groupId>com.mysema.maven</groupId>\r\n  <artifactId>maven-apt-plugin</artifactId>\r\n  <version>1.0.4</version>\r\n  <executions>\r\n    <execution>\r\n      <phase>generate-sources</phase>\r\n      <goals>\r\n        <goal>process</goal>\r\n      </goals>\r\n      <configuration>\r\n        <outputDirectory>generated-sources</outputDirectory>\r\n        <processor>com.mysema.query.apt.jpa.JPAAnnotationProcessor</processor>\r\n      </configuration>\r\n    </execution>\r\n  </executions>\r\n</plugin>\r\n````\r\nThe generated meta-model will appears under the generated-sources at the base of the maven project. I like to use in ide with class-path so its not under target directory.\r\n\r\nGenerate the sources with `mvn generate-sources`\r\n\r\n3) Now extends the custom repository with the `org.springframework.data.querydsl.QueryDslPredicateExecutor`.\r\n````java\r\npublic interface CountryRepository extends JpaRepository<Country, Long>,\r\n\t\t\t\t\t\t\t\t\t\t\tQueryDslPredicateExecutor<Country>{\r\n}\r\n````\r\n\r\n\r\n## Usage\r\n`mvn clean spring-boot:run` and hit the url `http://localhost:8080`\r\n\r\n## Contributing\r\n\r\n1. Fork it!\r\n2. Create your feature branch: `git checkout -b my-new-feature`\r\n3. Commit your changes: `git commit -am 'Add some feature'`\r\n4. Push to the branch: `git push origin my-new-feature`\r\n5. Submit a pull request :D\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}